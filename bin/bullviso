#!/usr/bin/env python3

"""
BULLVISO
Copyright (C) 2024  Conor D. Rankine

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software 
Foundation, either Version 3 of the License, or (at your option) any later 
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with 
this program.  If not, see <https://www.gnu.org/licenses/>.
"""

###############################################################################
############################### LIBRARY IMPORTS ###############################
###############################################################################

import sys
import tqdm
from pathlib import Path
from argparse import ArgumentParser
from rdkit import Chem
import bullviso.confcodes
import bullviso.geoms
import bullviso.utils
import bullviso.io

###############################################################################
############################## ARGUMENT PARSING ###############################
###############################################################################

def parse_args(args: list):

    p = ArgumentParser()

    p.add_argument('func_group_smile', type = str,
        help = 'SMILES string representation for the functional group'
    )
    p.add_argument('--func_group_attach_idx', '-a', type = int, default = 1,
        help =()
    )
    p.add_argument('--n_func_groups', '-n', type = int, default = 1,
        help = ('number of functional groups to attach')
    )
    p.add_argument('--m_confs', '-m', type = int, default = 1,
        help = ('number of conformational isomers to generate')
    )
    p.add_argument('--out_f_type', '-o', type = str, default = 'xyz',
        choices = ('xyz', 'gaussian', 'orca'),
        help = ('file type for output geometries')
    )

    args = p.parse_args()

    return args

###############################################################################
################################ MAIN FUNCTION ################################
###############################################################################

def main(args: list):

    args = parse_args(args)

    bullvalene_smile = 'C12C=C4.C13C=C5.C23C=CC45'
    print(f'>> bullvalene SMILE: {bullvalene_smile}')
    bullvalene = Chem.MolFromSmiles(bullvalene_smile)
    
    func_group_smile = args.func_group_smile
    print(f'>> functional group SMILE: {func_group_smile}')
    func_group = Chem.MolFromSmiles(func_group_smile)

    print(f'>> {args.n_func_groups} functional groups')

    confcodes = bullviso.confcodes.gen_confcodes(args.n_func_groups)
    print(f'>> {len(confcodes)} unique structural isomer(s)\n')

    print(f'>> constructing structural isomer(s)...')
    for confcode in tqdm.tqdm(confcodes, ncols = 80):       
        func_bullvalene = bullviso.geoms.functionalise(
            bullvalene,
            func_group,
            confcode,
            func_group_attach_idx = args.func_group_attach_idx
        )
        func_bullvalene = bullviso.geoms.generate_conformations(
            func_bullvalene,
            m_confs = args.m_confs
        )
        if func_bullvalene.GetNumConformers() > 0:
            confcode_str = bullviso.utils.tuple_to_str(confcode)
            d = Path(f'./{confcode_str}')
            if not d.is_dir():
                d.mkdir()
            for conf in func_bullvalene.GetConformers():
                out_d = d / f'./{confcode_str}_{conf.GetId()+1:03d}'
                if not out_d.is_dir():
                    out_d.mkdir()
                out_f = out_d / f'./{confcode_str}_{conf.GetId()+1:03d}'
                bullviso.io.mol_to_out_f(
                    out_f,
                    args.out_f_type,
                    func_bullvalene,
                    conf_idx = conf.GetId()
                )

################################################################################
############################## PROGRAM STARTS HERE #############################
################################################################################

if __name__ == '__main__':
    main(sys.argv[1:])

################################################################################
############################### PROGRAM ENDS HERE ##############################
################################################################################
