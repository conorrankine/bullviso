#!/usr/bin/env python3

"""
PYBULL
Copyright (C) 2022  Conor D. Rankine

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software 
Foundation, either Version 3 of the License, or (at your option) any later 
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with 
this program.  If not, see <https://www.gnu.org/licenses/>.
"""

###############################################################################
############################### LIBRARY IMPORTS ###############################
###############################################################################

import sys
import tqdm
from pathlib import Path
from argparse import ArgumentParser
from rdkit import Chem
import pybull.confcodes
import pybull.geo
import pybull.utils

###############################################################################
############################## ARGUMENT PARSING ###############################
###############################################################################

def parse_args(args: list):

    p = ArgumentParser()

    p.add_argument('func_group_smile', type = str,
        help = 'SMILES string representation for the functional group'
    )
    p.add_argument('--n_func_groups', '-n', type = int, default = 1,
        help = ('number of functional groups to add')
    )
    p.add_argument('--m_confs', '-m', type = int, default = 1,
        help = ('number of conformations to generate')
    )

    args = p.parse_args()

    return args

###############################################################################
################################ MAIN FUNCTION ################################
###############################################################################

def main(args: list):

    args = parse_args(args)

    bullvalene_smile = 'C12C=C4.C13C=C5.C23C=CC45'
    print(f'>> bullvalene SMILE: {bullvalene_smile}')
    bullvalene = Chem.MolFromSmiles(bullvalene_smile)
    
    func_group_smile = args.func_group_smile
    print(f'>> functional group SMILE: {func_group_smile}')
    func_group = Chem.MolFromSmiles(func_group_smile)

    print(f'>> {args.n_func_groups} functional groups')

    confcodes = pybull.confcodes.gen_confcodes(args.n_func_groups)
    print(f'>> {len(confcodes)} unique structural isomer(s)\n')

    print(f'>> constructing structural isomer(s)...')
    for confcode in tqdm.tqdm(confcodes, ncols = 80):       
        func_bullvalene = pybull.geo.functionalise(
            bullvalene,
            func_group,
            confcode
        )
        unconverged, mmff_energies = pybull.geo.generate_conformations(
            func_bullvalene
        )     
        conformer_idxs = pybull.utils.argsort(mmff_energies)[:args.m_confs]  
        confcode_str = pybull.utils.tuple_to_str(confcode)
        d = Path(f'./{confcode_str}')
        if not d.is_dir():
            d.mkdir()
        for idx in conformer_idxs:
            if unconverged[idx]:
                pass
            else:
                if args.m_confs > 1:
                    xyz_f = d / f'./{confcode_str}_{idx}.xyz'
                else:
                    xyz_f = d / f'./{confcode_str}.xyz'
                with open(xyz_f, 'w') as f:
                    f.write(Chem.MolToXYZBlock(func_bullvalene, confId = idx))
    print()
    
    print(f'...done!\n')

################################################################################
############################## PROGRAM STARTS HERE #############################
################################################################################

if __name__ == '__main__':
    main(sys.argv[1:])

################################################################################
############################### PROGRAM ENDS HERE ##############################
################################################################################
